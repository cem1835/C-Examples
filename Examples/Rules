using Infoline.Framework.Database;
using Infoline.IBBSis.BusinessAccess;
using Infoline.IBBSis.BusinessData;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization.Formatters.Binary;
using System.Web;
using System.Web.Mvc;
using static Infoline.IBBSis.WebProject.Areas.STN.Models.StationRules;

namespace Infoline.IBBSis.WebProject.Areas.STN.Models
{
    public class StationRules
    {

        private Guid StationId;

        private int _ThreshHold = 50;

        public enum RuleTypes
        {
            Average = 0,
            Threshold = 1,
            Currently = 2,
            MovingAverages = 3,
            Sum = 4,
        }


        /// <summary>
        /// Ortaya çıkacak olan verinin periyodu
        /// </summary>
        public enum DataPeriod
        {
            Min15 = 15,
            Hour = 60,
            Hour8 = 60 * 8,
            Day = 60 * 24,
            Week=60*24*7,
            Month=60*24*30,
            Year=60*24*30*12
        }

        /// <summary>
        /// Hesaplama Yada ortalama alınırken ham veriden hangisinin kullanılacağını seçmek için kullanılıyor
        /// </summary>
        public enum PurePeriod
        {
            Min = 1,
            Min15 = 15,
            Hour = 60,
            Day = 60 * 24,
        }

        #region Static Rules
        public AQIRule[] GetRule
        {
            get
            {
                return new AQIRule[]
                {
                    new AQIRule {
                        ParamName ="PM10",
                        HTMLName ="Partikül Madde 10 μm (PM<sub>10</sub>)",
                        Max =40,
                        Value =40,
                        RuleTypes =RuleTypes.Average,
                        DataPeriod =DataPeriod.Hour,
                        PurePeriod =PurePeriod.Hour,
                        TargetName ="Yıllık ortalama 40 μg/m3"
                    },
                    new AQIRule {
                        ParamName ="PM10",
                        HTMLName ="Partikül Madde 10 μm (PM<sub>10</sub>)",
                        Max =35,
                        Value =50,
                        RuleTypes =RuleTypes.Threshold,
                        DataPeriod =DataPeriod.Day,
                        PurePeriod =PurePeriod.Day,
                        TargetName ="Günlük 50 μg/m3 değerini 35 defadan fazla geçmesi"
                    },
                    new AQIRule {ParamName="NO2"     ,
                        HTMLName ="Azot Dioksit (NO<sub>2</sub>)",
                        Max =40,
                        Value =40,
                        RuleTypes =RuleTypes.Average,
                        DataPeriod =DataPeriod.Hour,
                        PurePeriod =PurePeriod.Hour,
                        TargetName ="Yıllık ortalama 40 μg/m3"
                    },
                    new AQIRule {
                        ParamName = "NO2",
                        HTMLName = "Azot Dioksit (NO<sub>2</sub>)",
                        Max = 18,
                        Value = 200,
                        RuleTypes = RuleTypes.Threshold,
                        DataPeriod = DataPeriod.Hour,
                        PurePeriod = PurePeriod.Hour,
                        TargetName = "Saatlik 200 μg/m3 değerini yılda 18 defadan fazla geçmesi"
                    },
                    new AQIRule {ParamName="SO2"     ,
                        HTMLName ="Kükürt Dioksit(SO<sub>2</sub>)"         ,
                        Max =20  ,
                        Value =20  ,
                        RuleTypes =RuleTypes.Average   ,
                        DataPeriod =DataPeriod.Hour        ,
                        PurePeriod =PurePeriod.Hour        ,
                        TargetName ="Yıllık ortalama 20 μg/m3"
                    },
                    new AQIRule {
                        ParamName = "SO2",
                        HTMLName = "Kükürt Dioksit(SO<sub>2</sub>)",
                        Max = 35,
                        Value = 266,
                        RuleTypes = RuleTypes.Threshold,
                        DataPeriod = DataPeriod.Min15,
                        PurePeriod = PurePeriod.Min15,
                        TargetName = "15 dakikalık 266 μg/m3 değerini yılda 35 defadan fazla geçmesi"
                    },
                    new AQIRule {
                        ParamName = "SO2",
                        HTMLName = "Kükürt Dioksit(SO<sub>2</sub>)",
                        Max = 24,
                        Value = 350,
                        RuleTypes = RuleTypes.Threshold,
                        DataPeriod = DataPeriod.Hour,
                        PurePeriod = PurePeriod.Hour,
                        TargetName = "Saatlik 350 μg/m3 değerini yılda 24 defadan fazla geçmesi"
                    },
                    new AQIRule {
                        ParamName = "SO2",
                        HTMLName = "Kükürt Dioksit(SO<sub>2</sub>)",
                        Max = 3,
                        Value = 125,
                        RuleTypes = RuleTypes.Threshold,
                        DataPeriod = DataPeriod.Day,
                        PurePeriod = PurePeriod.Day,
                        TargetName = "Günlük 125 μg/m3 değerini yılda 3 defadan fazla geçmesi"
                    },
                    new AQIRule {
                        ParamName = "PM25",
                        HTMLName = "Partikül Madde 2.5 μm (PM<sub>25</sub>)",
                        Max = 25,
                        Value = 25,
                        RuleTypes = RuleTypes.Average,
                        DataPeriod = DataPeriod.Hour,
                        PurePeriod = PurePeriod.Hour,
                        TargetName = "Yıllık ortalama 25 μg/m3"
                    },
                    new AQIRule {
                        ParamName = "Pb",
                        HTMLName = "Kurşun (Pb)",
                        Max = 0.5d,
                        Value = 0.5d,
                        RuleTypes = RuleTypes.Average,
                        DataPeriod = DataPeriod.Hour,
                        PurePeriod = PurePeriod.Hour,
                        TargetName = "Yıllık ortalama 0.5 μg/m3"
                    },
                    new AQIRule {
                        ParamName = "Benzen",
                        HTMLName = "Benzen",
                        Max = 5,
                        Value = 5,
                        RuleTypes = RuleTypes.Average,
                        DataPeriod = DataPeriod.Hour,
                        PurePeriod = PurePeriod.Hour,
                        TargetName = "Yıllık ortalama 5 μg/m3"
                    },
                    new AQIRule {
                        ParamName = "CO",
                        HTMLName = "Karbon Monoksit (CO)",
                        Max = 10,
                        Value = 10 * 1000,
                        RuleTypes = RuleTypes.MovingAverages,
                        DataPeriod = DataPeriod.Hour,
                        PurePeriod = PurePeriod.Hour,
                        TargetName = "Devam eden 8 saatlik ortalama 10 mg/m3"
                    },
                    new AQIRule {
                        ParamName = "O3",
                        HTMLName = "Ozon (O<sub>3</sub>)",
                        Max = 25,
                        Value = 120,
                        RuleTypes = RuleTypes.MovingAverages,
                        DataPeriod = DataPeriod.Hour,
                        PurePeriod = PurePeriod.Hour,
                        TargetName = " 8 saatlik ortalama 120 μg/m3 yılda 25 defadan fazla geçmesi"
                    },
                    new AQIRule
                    {
                        ParamName="O3",
                        HTMLName="Ozon (O<sub>3</sub>)",
                        Max=null,
                        Value=null,
                        RuleTypes=RuleTypes.Average,
                        DataPeriod=DataPeriod.,
                        PurePeriod=DataPeriod.


                    }
                };
            }
        }

        public AQIRule[] GetExternalRule
        {
            get
            {
                return new AQIRule[]
                {
                    new AQIRule {
                        ParamName = "O3",
                        HTMLName = "Ozon (O<sub>3</sub>)",
                        Max = 180,
                        Value = 180,
                        RuleTypes = RuleTypes.Threshold,
                        DataPeriod = DataPeriod.Hour,
                        PurePeriod = PurePeriod.Hour,
                        TargetName = "Saatlik Ortalamanın 180 μg/m3 Değerini Geçmesi"
                    },
                    new AQIRule {
                        ParamName = "O3",
                        HTMLName = "Ozon (O<sub>3</sub>)",
                        Max = 240,
                        Value = 240,
                        RuleTypes = RuleTypes.Threshold,
                        DataPeriod = DataPeriod.Hour,
                        PurePeriod = PurePeriod.Hour,
                        TargetName = "Saatlik Ortalamanın 240 μg/m3 Değerini Geçmesi"
                    },
                    new AQIRule {
                        ParamName = "O3",
                        HTMLName = "Ozon (O<sub>3</sub>)",
                        Max = 40,
                        Value = 40,
                        RuleTypes = RuleTypes.Average,
                        DataPeriod = DataPeriod.Hour,
                        PurePeriod = PurePeriod.Hour,
                        TargetName = "Yıllık ortalama 40 μg/m3"
                    },
                    new AQIRule {
                        ParamName = "O3",
                        HTMLName = "Ozon (O<sub>3</sub>)",
                        Max = 6000,
                        Value = 6000,
                        RuleTypes = RuleTypes.Sum,
                        DataPeriod = DataPeriod.Hour,
                        PurePeriod = PurePeriod.Hour,
                        TargetName = "AOT40 Mayıs-Temmuz saatlik toplamın 6000 μg/m3 altında olması ",
                        FromMonth = 5,
                        ToMonth = 7
                    },
                    new AQIRule {
                        ParamName = "O3",
                        HTMLName = "Ozon (O<sub>3</sub>)",
                        Max = 20000,
                        Value = 20000,
                        RuleTypes = RuleTypes.Sum,
                        DataPeriod = DataPeriod.Hour,
                        PurePeriod = PurePeriod.Hour,
                        TargetName = "AOT40 Mayıs-Temmuz saatlik toplamın 6000 μg/m3 altında olması ",
                        FromMonth = 4,
                        ToMonth = 9
                    }
                };
            }
        }
        #endregion

        #region Func's

        // Data Percent
        private static Func<AQIRule, IEnumerable<BusinessAccess.RuleModel>, AQIRule> DataPercent = (rule, data) =>
        {

            var period = (int)rule.DataPeriod;

            if (data == null || data.Count() == 0)
            {
                return new AQIRule
                {
                    DataPercent = 0,
                    DataPercent75 = false,
                }.B_EntityDataCopyForMaterial(rule);
            }

            var year = data.FirstOrDefault().Readtime.Value.Year;
            double totalMinutes;

            if (year == DateTime.Now.Year)
            {
                totalMinutes = (DateTime.Now - new DateTime(year, 1, 1)).TotalMinutes;
            }
            else
            {
                totalMinutes = (new DateTime(year, 12, 31) - new DateTime(year, 1, 1)).TotalMinutes;
            }

            var count = data.Where(x => x.Period == period && x.GetType().GetProperty(rule.ParamName).GetValue(x, null) != null).Count();
            var dataPercent = Math.Round((count / (totalMinutes / period)) * 100f);

            var result = new AQIRule
            {
                DataPercent = dataPercent,
                DataPercent75 = dataPercent >= 75 ? true : false,
            }.B_EntityDataCopyForMaterial(rule);

            return result;

        };

        // Average
        private Func<IEnumerable<BusinessAccess.RuleModel>, AQIRule, AQIRule> Average = (data, param) =>
        {

            var res = data.Where(x => x.Period == (int)param.DataPeriod).Average(x => (double?)x.GetType().GetProperty(param.ParamName).GetValue(x, null));
            res = res.HasValue ? (double?)Math.Round(res.Value, SystemUnits.GetFormat(param.ParamName)) : null;

            return DataPercent(new AQIRule
            {
                Result = (res == null || res > param.Max) ? false : true,
                ResultDetails = res != null ?
                    res.Value.ToString("N" + SystemUnits.GetFormat(param.ParamName), System.Globalization.CultureInfo.InvariantCulture) + " " + SystemUnits.GetUnit(param.ParamName) :
                    param.ParamName + ": Değer Bulunamadı "
            }.B_EntityDataCopyForMaterial(param), data);
        };


        // Average - Group
        private Func<IEnumerable<BusinessAccess.RuleModel>, AQIRule, List<RuleModel>> GroupAverage = (data, param) =>
        {

            var source = data.Where(x => x.Period == (int)param.PurePeriod && x.GetType().GetProperty(param.ParamName).GetValue(x, null) != null).ToArray();
            var destinationArray = DeepCopy(source);

            var result = destinationArray
                    .GroupBy(x => x.Readtime.Value.ToString("dd.MM.yyyy"))
                    .Select(x => x.Select(y =>
                    {
                        y.Readtime = DateTime.ParseExact(x.Key, "dd.MM.yyyy", System.Globalization.CultureInfo.InvariantCulture);
                        y.Period = (short?)param.DataPeriod;

                        double? averageValue = x.Average(z => (double?)z.GetType().GetProperty(param.ParamName).GetValue(z, null));
                        PropertyInfo propInfo = y.GetType().GetProperty(param.ParamName);
                        propInfo.SetValue(y, averageValue);

                        return y;
                    })
                    .FirstOrDefault())
                    .OrderBy(x => x.Readtime).ToList();

            return result;
        };


        // Sum
        private Func<IEnumerable<BusinessAccess.RuleModel>, AQIRule, AQIRule> Sum = (data, param) =>
       {
           var year = data.FirstOrDefault().Readtime.Value.Year;
           var beginDate = new DateTime(year, param.FromMonth.Value, 1);
           var endDate = new DateTime(year, param.ToMonth.Value, DateTime.DaysInMonth(year, param.ToMonth.Value), 23, 59, 0);

           var Sum = data.Where(x => x.Readtime >= beginDate && x.Readtime < endDate).Sum(x => (double?)x.GetType().GetProperty(param.ParamName).GetValue(x, null));

           return DataPercent(new AQIRule
           {
               Result = (Sum == null || Sum > param.Max) ? false : true,
               ResultDetails = Sum != null ?
                Sum.Value.ToString("N" + SystemUnits.GetFormat(param.ParamName), System.Globalization.CultureInfo.InvariantCulture) + " " + SystemUnits.GetUnit(param.ParamName) :
                param.ParamName + ": Değer Bulunamadı"
           }.B_EntityDataCopyForMaterial(param), data);

       };


        // Threshold
        private Func<IEnumerable<BusinessAccess.RuleModel>, AQIRule, AQIRule> ThreshHold = (data, param) =>
       {

           if (data.Where(x => (double?)x.GetType().GetProperty(param.ParamName).GetValue(x, null) != null && x.Period == (short?)param.PurePeriod).Count() == 0)
           {
               return new AQIRule
               {
                   Result = null,
                   ResultDetails = "Bulunamadı",
               }.B_EntityDataCopyForMaterial(param);
           }

           var threshold = data.Where(x => x.Period == (short?)param.PurePeriod && (double?)x.GetType().GetProperty(param.ParamName).GetValue(x, null) > param.Value).Count();

           var result = DataPercent(new AQIRule
           {
               Result = ((threshold > param.Max) ? false : true),
               ResultDetails = threshold.ToString() + " Defa Geçti"
           }.B_EntityDataCopyForMaterial(param), data);

           return result;

       };


        // Instant
        private Func<IEnumerable<BusinessAccess.RuleModel>, AQIRule, AQIRule> HourlyInstant = (data, param) =>
           {

               if (data.Where(x => (double?)x.GetType().GetProperty(param.ParamName).GetValue(x, null) != null).Count() == 0)
               {
                   return new AQIRule
                   {
                       Result = null,
                       ResultDetails = "Bulunamadı",
                   }.B_EntityDataCopyForMaterial(param);
               }

               var Ndata = data.Where(x =>
                    x.Period == (int)param.PurePeriod &&
                    x.GetType().GetProperty(param.ParamName).GetValue(x, null) != null &&
                    x.Readtime >= DateTime.Now.AddMinutes(((int)param.DataPeriod) * (-1))
                    );
               var val = Ndata.Average(x => (double?)x.GetType().GetProperty(param.ParamName).GetValue(x, null));
               var percent = Math.Round((Ndata.Count() * (float)param.PurePeriod / (float)param.DataPeriod) * 100f);

               var result = new AQIRule
               {
                   DataPercent = percent,
                   DataPercent75 = percent > 75 ? true : false,
                   Result = (val > param.Max ? false : true),
                   ResultDetails = (val != null ? val.Value.ToString("N" + SystemUnits.GetFormat(param.ParamName), System.Globalization.CultureInfo.InvariantCulture) : " Bulunamadı")
               }.B_EntityDataCopyForMaterial(param);

               return result;
           };

     
        // Moving Averages
        private Func<IEnumerable<BusinessAccess.RuleModel>, AQIRule, AQIRule> MovingAverages = (data, param) =>
        {
            if (data.ToArray().Count() == 0 || data.Where(x => (double?)x.GetType().GetProperty(param.ParamName).GetValue(x, null) != null).Count() == 0)
                return new AQIRule
                {
                    Result = false,
                    ResultDetails = "Veri Yok",
                    DataPercent = 0,
                    DataPercent75 = false,
                }.B_EntityDataCopyForMaterial(param);
            
            var minDate = data.Min(x => x.Readtime.Value);
            var maxDate = data.Max(x => x.Readtime.Value);
            var sumThreshold = 0;

            while (minDate >= maxDate)
            {
                var currentAverage = data.Where(x => x.Readtime > minDate.AddHours(-8) && x.Readtime <= minDate).Average(x => (double?)x.GetType().GetProperty(param.ParamName).GetValue(x, null));

                if (currentAverage > param.Value)
                    sumThreshold++;
                
                minDate = minDate.AddHours(1);
            }

            var result = DataPercent(new AQIRule
            {
                Result = ((sumThreshold > param.Max) ? false : true),
                ResultDetails = sumThreshold.ToString() + " Defa Geçti"
            }.B_EntityDataCopyForMaterial(param), data);

            return result;
        };
        #endregion



        /// <summary>
        /// İstasyon için  Yıllık Hedef Sonucunu Döndürür. Data Gönderilmezse son yılı dönderir. Yıl Ya da Data Gönderilebilir.
        /// </summary>
        /// <param name="StationId"> İstasyon Id'si</param>
        /// <param name="data"> İstasyon Datası (isteğe bağlı 15dk ve 60dk lık sonuçları gerektirir.)</param>
        /// <returns></returns>
        public ResultStatus<List<AQIRule>> GetStationAQIRule(Guid StationId, RuleModel[] data = null, int? Year = null, bool ExternalRule = false)
        {
            try
            {
                var myData = new RuleModel[] { };
                var returnData = new List<AQIRule>();
                this.StationId = StationId;

                // ikiside null değilse
                if (data != null && Year != null)
                {
                    return new ResultStatus<List<AQIRule>> { result = false, message = "Data ve Yıl Aynı Anda Gönderilmiş.!" };
                }
                
                // ikiside null ise
                if (data == null && Year == null)
                {
                    data = new InfolineIBBSisDatabase().GetSTN_StationValidMeasurement(StationId, new DateTime(DateTime.Now.Year, 1, 1,0,0,0));
                }
                else if (data == null && Year != null)
                {
                  
                    data = new InfolineIBBSisDatabase().GetSTN_StationValidMeasurement(StationId, new DateTime(Year.Value, 1, 1));
              
                }
              
                foreach (var param in GetRule.GroupBy(x => x.ParamName).Select(x => x.Key).ToArray())
                {
                    returnData.AddRange(GetParamRule(param, data.ToList()));
                }

                if (ExternalRule)
                {
                    foreach (var param in GetExternalRule.GroupBy(x => x.ParamName).Select(x => x.Key).ToArray())
                    {
                        returnData.AddRange(GetParamRule(param, data.ToList(), true));
                    }
                }

                return new ResultStatus<List<AQIRule>> { result = true, objects = returnData };

            }
            catch (Exception ex)
            {
                return new ResultStatus<List<AQIRule>> { result = false, message = ex.Message };
            }
        }

        /// <summary>
        /// Gönderilen Parametrenin Hedef Sonuçlarını Hesaplar
        /// </summary>
        /// <param name="param"> Parametre Adı</param>
        /// <param name="data"> Data'sı </param>
        /// <returns></returns>
        private List<AQIRule> GetParamRule(string param, List<RuleModel> data, bool isExternal = false)
        {

            try
            {
                AQIRule[] rules;

                if (isExternal)
                {
                    rules = GetExternalRule.Where(x => x.ParamName == param).ToArray();
                }
                else
                {
                    rules = GetRule.Where(x => x.ParamName == param).ToArray();
                }

                if (rules.Length < 1)
                {
                    return null;
                }

                var returnList = new List<AQIRule>();            

                foreach (var rule in rules)
                {

                    if (rule.RuleTypes == RuleTypes.Average)
                    {
                        returnList.Add(Average(data, rule));
                    }
                    else if (rule.RuleTypes == RuleTypes.Currently)
                    {
                        returnList.Add(HourlyInstant(data, rule));
                    }
                    else if (rule.RuleTypes == RuleTypes.MovingAverages)
                    {
                        returnList.Add(MovingAverages(data, rule));
                    }
                    else if (rule.RuleTypes == RuleTypes.Threshold)
                    {

                        if (rule.DataPeriod == DataPeriod.Min15)
                        {
                            if (data.Count() != 0)
                            {
                                var db = new InfolineIBBSisDatabase();
                                var mData = db.GETSTN_DataRawAirQualityByStationAndReadtimeSpecificParam(this.StationId, data.Min(x => x.Readtime.Value), param, 15);
                                returnList.Add(ThreshHold(mData, rule));
                            }
                        }
                        else
                        {
                            returnList.Add(ThreshHold(data, rule));
                        }
                    }
                }

                return returnList;

            }
            catch (Exception ex)
            {
                return null;
            }
        }

        /// <summary>
        /// Gönderilen Parametrenin Yıllık Hedef Sonucunu Döndürür.
        /// </summary>
        /// <param name="stationId"></param>
        /// <param name="paramName"></param>
        /// <param name="data"></param>
        /// <returns></returns>
        public ResultStatus<List<AQIRule>> GetParamRule(Guid stationId, string paramName, List<RuleModel> data = null, bool isExternal = false)
        {
            try
            {
                // TODO : Yıl Ekle
                if (data == null)
                {
                    data = new InfolineIBBSisDatabase().GETSTN_DataRawAirQualityByStationAndReadtimeSpecificParam(stationId, DateTime.Now.AddYears(-1), paramName, 1).ToList();
                }

                return new ResultStatus<List<AQIRule>>
                {
                    result = true,
                    objects = this.GetParamRule(paramName, data, isExternal)
                };

            }
            catch (Exception ex)
            {
                
                return new ResultStatus<List<AQIRule>> { result = false, message = ex.Message };
            }
        }

        public static RuleModel[] DeepCopy(RuleModel[] data)
        {
            using (MemoryStream memoryStream = new MemoryStream())
            {
                BinaryFormatter binaryFormatter = new BinaryFormatter();
                binaryFormatter.Serialize(memoryStream, data);
                memoryStream.Seek(0, SeekOrigin.Begin);
                return (RuleModel[])binaryFormatter.Deserialize(memoryStream);
            }
        }

    }

    // Javascript Tarafına Dönecek ve kuralları tanımladığımız class
    public class AQIRule
    {
        /// <summary>
        /// Parametre Adı
        /// </summary>
        public string ParamName { get; set; }

        /// <summary>
        /// HTML'e Dönen Değer
        /// </summary>
        public string HTMLName { get; set; }

        /// <summary>
        ///  Hedefin Adı (Açıklaması -Detayı)
        /// </summary>
        public string TargetName { get; set; }

        /// <summary>
        /// Hedef Değer
        /// </summary>
        public double? Value { get; set; }

        /// <summary>
        /// Maksimum Değer
        /// </summary>
        public double? Max { get; set; }

        /// <summary>
        ///  Veri Yüzdesi
        /// </summary>
        public double? DataPercent { get; set; }

        /// <summary>
        /// Yüzde 75 Veri Şartı Sağlanıyor mu ?
        /// </summary>
        public bool? DataPercent75 { get; set; }

        /// <summary>
        /// Kural Tipi
        /// </summary>
        public RuleTypes RuleTypes { get; set; }

        /// <summary>
        /// Ortaya çıkan verinin periyodu
        /// </summary>
        public DataPeriod DataPeriod { get; set; }

        /// <summary>
        /// Ham Verinin Veri Periyodu
        /// </summary>
        public PurePeriod PurePeriod { get; set; }

        /// <summary>
        /// Hedef Sağlandı mı ?
        /// </summary>
        public bool? Result { get; set; }


        /// <summary>
        /// Hedef Sonuç Açıklaması
        /// </summary>
        public string ResultDetails { get; set; }


        /// <summary>
        /// Toplamlarda Başlangıç Ayı
        /// </summary>
        public int? FromMonth { get; set; }

        /// <summary>
        /// Toplamlarda Bitiş Ayı
        /// </summary>
        public int? ToMonth { get; set; }
    }

}
